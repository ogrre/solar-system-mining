# solar system mining

services:
    app:
        build:
            context: .
            dockerfile: Dockerfile
        image: solar-system-mining/app:latest
        container_name: solar-system-mining-app
        volumes:
            - .:/var/www/html
        depends_on:
            - postgres
            - redis
            - kafka
        environment:
            - APP_ENV=${APP_ENV}
            - APP_KEY=${APP_KEY}
            - APP_DEBUG=${APP_DEBUG}
            - APP_URL=${APP_URL}
            - DB_CONNECTION=${DB_CONNECTION}
            - DB_HOST=${DB_HOST}
            - DB_PORT=${DB_PORT}
            - DB_DATABASE=${DB_DATABASE}
            - DB_USERNAME=${DB_USERNAME}
            - DB_PASSWORD=${DB_PASSWORD}
            - REDIS_HOST=${REDIS_HOST}
            - REDIS_PORT=${REDIS_PORT}
            - REDIS_PASSWORD=${REDIS_PASSWORD}
            - MAIL_MAILER=${MAIL_MAILER}
            - MAIL_HOST=${MAIL_HOST}
            - MAIL_PORT=${MAIL_PORT}
            - MAIL_USERNAME=${MAIL_USERNAME}
            - MAIL_PASSWORD=${MAIL_PASSWORD}
            - SENTRY_LARAVEL_DSN=${SENTRY_LARAVEL_DSN}
            - KAFKA_BROKER=${KAFKA_HOST}:${KAFKA_PORT}
            - PHP_IDE_CONFIG=serverName=docker

    nginx:
        image: nginx:alpine
        container_name: solar-system-mining-nginx
        ports:
            - "${NGINX_PORT}:80"
        volumes:
            - .:/var/www/html
            - ./docker/nginx/conf.d:/etc/nginx/conf.d
        depends_on:
            - app

    postgres:
        image: postgres:15-alpine
        container_name: solar-system-mining-postgres
        ports:
            - "${DB_PORT_EXTERNAL}:${DB_PORT}"
        environment:
            - POSTGRES_DB=${DB_DATABASE}
            - POSTGRES_USER=${DB_USERNAME}
            - POSTGRES_PASSWORD=${DB_PASSWORD}
        volumes:
            - postgres_data:/var/lib/postgresql/data

    redis:
        image: redis:alpine
        container_name: solar-system-mining-redis
        ports:
            - "${REDIS_PORT_EXTERNAL}:${REDIS_PORT}"
        command: redis-server --requirepass ${REDIS_PASSWORD}
        volumes:
            - redis_data:/data

    # Conditionally use Adminer or phpMyAdmin based on DB_ADMIN var
    adminer:
        image: ${DB_ADMIN:-adminer}:latest
        container_name: solar-system-mining-db-admin
        platform: ${DB_ADMIN_PLATFORM:-linux/amd64}
        ports:
            - "${PMA_PORT}:8080"
        environment:
            - ADMINER_DEFAULT_SERVER=${DB_HOST}
            - PMA_HOST=${DB_HOST}
            - PMA_PORT=${DB_PORT}
        depends_on:
            - postgres

    zookeeper:
        image: confluentinc/cp-zookeeper:7.4.0
        container_name: solar-system-mining-zookeeper
        ports:
            - "${ZOOKEEPER_PORT}:2181"
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        volumes:
            - zookeeper_data:/var/lib/zookeeper/data
            - zookeeper_log:/var/lib/zookeeper/log

    kafka:
        image: confluentinc/cp-kafka:7.4.0
        container_name: solar-system-mining-kafka
        depends_on:
            - zookeeper
        ports:
            - "${KAFKA_PORT_EXTERNAL}:${KAFKA_PORT}"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        volumes:
            - kafka_data:/var/lib/kafka/data

    kafka-ui:
        image: provectuslabs/kafka-ui:latest
        container_name: solar-system-mining-kafka-ui
        ports:
            - "${KAFKA_UI_PORT}:8080"
        environment:
            KAFKA_CLUSTERS_0_NAME: local
            KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
            KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
        depends_on:
            - kafka

volumes:
    app_data:
    postgres_data:
    redis_data:
    zookeeper_data:
    zookeeper_log:
    kafka_data:
