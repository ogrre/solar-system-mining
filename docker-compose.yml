# solar system mining docker compose file

services:
    app:
        build:
            context: .
            dockerfile: Dockerfile
        image: solar-system-mining/app:dev
        container_name: solar-system-mining-app
        volumes:
            - .:/var/www/html:cached
            - ./docker/php/php.ini:/usr/local/etc/php/conf.d/custom.ini
            - ./docker/php/xdebug.log:/var/log/xdebug.log
        user: "${APP_USER:-root}"
        depends_on:
            - postgres
            - redis
            - kafka
        environment:
            - APP_ENV=${APP_ENV:-local}
            - APP_KEY=${APP_KEY}
            - APP_DEBUG=${APP_DEBUG:-true}
            - APP_URL=${APP_URL:-http://localhost}
            - DB_CONNECTION=${DB_CONNECTION:-pgsql}
            - DB_HOST=${DB_HOST:-postgres}
            - DB_PORT=${DB_PORT:-5432}
            - DB_DATABASE=${DB_DATABASE:-laravel}
            - DB_USERNAME=${DB_USERNAME:-postgres}
            - DB_PASSWORD=${DB_PASSWORD:-secret}
            - REDIS_HOST=${REDIS_HOST:-redis}
            - REDIS_PORT=${REDIS_PORT:-6379}
            - REDIS_PASSWORD=${REDIS_PASSWORD:-null}
            - MAIL_MAILER=${MAIL_MAILER:-log}
            - MAIL_HOST=${MAIL_HOST:-mailhog}
            - MAIL_PORT=${MAIL_PORT:-1025}
            - MAIL_USERNAME=${MAIL_USERNAME:-null}
            - MAIL_PASSWORD=${MAIL_PASSWORD:-null}
            - SENTRY_LARAVEL_DSN=${SENTRY_LARAVEL_DSN:-null}
            - KAFKA_BROKER=${KAFKA_HOST:-kafka}:${KAFKA_PORT:-9092}
            - QUEUE_CONNECTION=${QUEUE_CONNECTION:-redis}
            - PHP_IDE_CONFIG=serverName=docker
            - XDEBUG_MODE=${XDEBUG_MODE:-develop,debug}
            - FIX_PERMISSIONS=${FIX_PERMISSIONS:-false}
        healthcheck:
            test: ["CMD", "php", "-v"]
            interval: 10s
            timeout: 5s
            retries: 3

    node:
        build:
            context: .
            dockerfile: Dockerfile
            target: development
        image: solar-system-mining/app:dev
        container_name: solar-system-mining-node
        working_dir: /var/www/html
        volumes:
            - .:/var/www/html:cached
        entrypoint: ["npm"]
        command: ["--help"]
        profiles: ["node"]

    queue:
        build:
            context: .
            dockerfile: Dockerfile
            target: development
        image: solar-system-mining/app:dev
        container_name: solar-system-mining-queue
        volumes:
            - .:/var/www/html:cached
        depends_on:
            - app
            - redis
        environment:
            - APP_ENV=${APP_ENV:-local}
            - APP_KEY=${APP_KEY}
            - QUEUE_CONNECTION=${QUEUE_CONNECTION:-redis}
        command: php artisan queue:work --tries=3 --backoff=3
        restart: unless-stopped
        profiles: ["queue"]

    nginx:
        image: nginx:alpine
        container_name: solar-system-mining-nginx
        ports:
            - "${NGINX_PORT:-80}:80"
        volumes:
            - .:/var/www/html
            - ./docker/nginx/conf.d:/etc/nginx/conf.d
        depends_on:
            - app
        healthcheck:
            test: ["CMD", "wget", "-qO-", "http://localhost"]
            interval: 10s
            timeout: 5s
            retries: 3

    postgres:
        image: postgres:15-alpine
        container_name: solar-system-mining-postgres
        ports:
            - "${DB_PORT_EXTERNAL:-5433}:${DB_PORT:-5432}"
        environment:
            - POSTGRES_DB=${DB_DATABASE:-laravel}
            - POSTGRES_USER=${DB_USERNAME:-postgres}
            - POSTGRES_PASSWORD=${DB_PASSWORD:-secret}
        volumes:
            - postgres_data:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "${DB_USERNAME:-postgres}"]
            interval: 10s
            timeout: 5s
            retries: 3

    redis:
        image: redis:alpine
        container_name: solar-system-mining-redis
        ports:
            - "${REDIS_PORT_EXTERNAL:-6380}:${REDIS_PORT:-6379}"
        command: redis-server --requirepass ${REDIS_PASSWORD:-null}
        volumes:
            - redis_data:/data
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 5s
            retries: 3

    # Conditionally use Adminer or phpMyAdmin based on DB_ADMIN var
    adminer:
        image: ${DB_ADMIN:-adminer}:latest
        container_name: solar-system-mining-db-admin
        platform: ${DB_ADMIN_PLATFORM:-linux/amd64}
        ports:
            - "${PMA_PORT:-8080}:8080"
        environment:
            - ADMINER_DEFAULT_SERVER=${DB_HOST:-postgres}
            - PMA_HOST=${DB_HOST:-postgres}
            - PMA_PORT=${DB_PORT:-5432}
        depends_on:
            - postgres

    mailhog:
        image: mailhog/mailhog:latest
        container_name: solar-system-mining-mailhog
        ports:
            - "${MAILHOG_PORT:-8025}:8025"
        profiles: ["mailhog"]

    zookeeper:
        image: confluentinc/cp-zookeeper:7.4.0
        container_name: solar-system-mining-zookeeper
        ports:
            - "${ZOOKEEPER_PORT:-2181}:2181"
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        volumes:
            - zookeeper_data:/var/lib/zookeeper/data
            - zookeeper_log:/var/lib/zookeeper/log
        healthcheck:
            test: ["CMD", "nc", "-z", "localhost", "2181"]
            interval: 10s
            timeout: 5s
            retries: 3

    kafka:
        image: confluentinc/cp-kafka:7.4.0
        container_name: solar-system-mining-kafka
        depends_on:
            - zookeeper
        ports:
            - "${KAFKA_PORT_EXTERNAL:-9093}:${KAFKA_PORT:-9092}"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        volumes:
            - kafka_data:/var/lib/kafka/data
        healthcheck:
            test: ["CMD", "nc", "-z", "localhost", "9092"]
            interval: 10s
            timeout: 5s
            retries: 3

    kafka-ui:
        image: provectuslabs/kafka-ui:latest
        container_name: solar-system-mining-kafka-ui
        ports:
            - "${KAFKA_UI_PORT:-8081}:8080"
        environment:
            KAFKA_CLUSTERS_0_NAME: local
            KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
            KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
        depends_on:
            - kafka

volumes:
    app_data:
    postgres_data:
    redis_data:
    zookeeper_data:
    zookeeper_log:
    kafka_data:
